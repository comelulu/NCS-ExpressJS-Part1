// 1. Express 모듈 불러오기
//    Node.js에서 서버를 만들기 위한 웹 프레임워크
const express = require("express");

// 2. 앱 인스턴스 생성
//    라우터, 미들웨어, 서버 실행 등을 이 app 객체로 처리합니다.
const app = express();

/*
==========================================================
📦 실제 시나리오: "상품 처리 공장"
- 이 코드는 Express 미들웨어를 활용해 마치 물류센터처럼 요청 흐름을 구성했습니다.
- 각각의 미들웨어는 상품의 처리 단계를 나타냅니다.
- 사용자가 "/delivery" 경로로 요청을 보내면, 상품이 공장을 거쳐 고객에게 배송되는 과정을 흉내냅니다.
==========================================================
*/

// ✅ [1단계] 상품이 공장에 도착
app.use((req, res, next) => {
  console.log("[1단계]: 상품이 도착했습니다.");
  next(); // 다음 단계로 넘어갑니다
});

// ✅ [2단계] 입고 처리
app.use((req, res, next) => {
  console.log("[2단계]: 상품이 입고되었습니다.");
  next();
});

// ✅ [3단계] 재고 시스템 등록
app.use((req, res, next) => {
  console.log("[3단계]: 재고 관리를 시작했습니다.");
  next();
});

// ✅ [4단계] 주문 확인
app.use((req, res, next) => {
  console.log("[4단계]: 주문 처리되었습니다.");
  next();
});

// ✅ [5단계] 배송 준비 완료 → 이제 실제 배송 라우터로 이동합니다
app.use((req, res, next) => {
  console.log("[5단계]: 물류 배송이 시작되었습니다. 라우터로 이동합니다.");
  next();
});

// ✅ [최종 단계] 배송 시작 (라우터 핸들러)
//     클라이언트가 "/delivery" 경로로 요청할 때 실행됩니다.
app.get("/delivery", (req, res) => {
  console.log("🚚 물류 배송 시작"); // 콘솔에 최종 메시지 출력
  res.send("<h1>물류 배송 시작</h1>"); // 클라이언트에게 HTML 응답 전송
});

// ✅ 3000번 포트에서 서버 실행
app.listen(3000, () => {
  console.log("✅ 서버가 3000번 포트에서 실행 중입니다.");
});
