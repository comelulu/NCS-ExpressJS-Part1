// 1. Express 모듈을 불러옵니다.
//    Express는 Node.js에서 웹 서버를 쉽고 빠르게 만들 수 있도록 도와주는 프레임워크입니다.
const express = require("express");

// 2. express() 함수를 호출하여 애플리케이션 인스턴스를 생성합니다.
//    이 'app' 객체를 사용해 라우팅, 미들웨어 설정, 서버 실행 등을 처리합니다.
const app = express();

/*
--------------------------------------------------------
🔹 [미들웨어란?]
- 미들웨어(Middleware)는 '요청(Request)'과 '응답(Response)' 사이에서 실행되는 함수입니다.
- 클라이언트로부터 요청이 들어오면, Express는 등록된 미들웨어들을 '순서대로' 실행합니다.
- 각 미들웨어는 요청(req), 응답(res), 그리고 '다음 미들웨어를 호출하는 next() 함수'를 인자로 받습니다.

🔹 [app.use()]
- 이 메서드는 경로 지정 없이 모든 요청에 대해 미들웨어를 적용합니다.
- 즉, 어떤 경로로 어떤 메서드(GET, POST 등)로 요청이 오더라도 실행됩니다.
--------------------------------------------------------
*/

// ✅ 첫 번째 미들웨어
app.use((req, res, next) => {
  // 이 미들웨어는 모든 요청이 들어올 때 가장 먼저 실행됩니다.
  // 콘솔 로그를 통해 요청 흐름을 추적할 수 있습니다.
  console.log("첫 번째 미들웨어");

  // next() 함수를 호출하면 요청이 다음 미들웨어로 전달됩니다.
  // 호출하지 않으면 요청 처리가 여기서 멈춰서 응답이 클라이언트에게 가지 않습니다.
  next();
});

// ✅ 두 번째 미들웨어
app.use((req, res, next) => {
  // 첫 번째 미들웨어에서 next()가 호출되었기 때문에, 이 미들웨어가 실행됩니다.
  console.log("두 번째 미들웨어");

  // 여기서 응답을 보내고 요청 처리를 종료합니다.
  // res.send()는 클라이언트에게 응답을 보내는 메서드입니다.
  res.send("응답 완료");

  /*
  ✅ 주의:
  - res.send()가 실행되면 더 이상 다른 미들웨어나 라우터는 실행되지 않습니다.
  - 즉, 이 시점에서 요청-응답 사이클이 '종료'됩니다.
  */
});

// ✅ 특정 라우팅 핸들러 (실제로는 실행되지 않음)
app.get("/", (req, res) => {
  // 이 라우트 핸들러는 브라우저에서 '/' 경로로 GET 요청이 들어왔을 때 실행됩니다.
  // 하지만 위에서 응답이 이미 끝났기 때문에 이 코드는 실행되지 않습니다.
  res.send("<h1>Homepage</h1>");
});

/*
--------------------------------------------------------
🔹 [요청 처리 흐름 요약]

클라이언트 요청 흐름 시각화:

┌────────────────────────────┐
│  클라이언트 요청 발생      │  ← 브라우저: http://localhost:3000/
└────────────┬───────────────┘
             │
             ▼
┌────────────────────────────┐
│ 첫 번째 미들웨어 실행         │
│ console.log("첫 번째")      │
└────────────┬───────────────┘
             │ next()
             ▼
┌────────────────────────────┐
│ 두 번째 미들웨어 실행         │
│ console.log("두 번째")      │
│ res.send("응답 완료")      │ ← 여기서 응답이 끝납니다!
└────────────┬───────────────┘
             │
             └──[종료] 라우터 실행 안 됨

※ app.get("/") 라우터는 실행되지 않음
--------------------------------------------------------
*/

// ✅ 서버 실행
//    서버를 3000번 포트에서 실행하고, 요청을 기다립니다.
app.listen(3000, () => {
  console.log("✅ 서버가 3000번 포트에서 실행 중입니다.");
});
